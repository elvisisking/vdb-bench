{"version":3,"sources":["vdb-bench-dataservice/dsPrefController.ts"],"names":[],"mappings":"AAAA,CAAC;IACG,YAAY,CAAC;IAEb,IAAI,UAAU,GAAG,uBAAuB,CAAC;IACzC,IAAI,aAAa,GAAG,uBAAuB,CAAC;IAE5C,OAAO;SACF,MAAM,CAAC,UAAU,CAAC;SAClB,UAAU,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;IAEtD,gBAAgB,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;IAE7D,0BAA0B,MAAM,EAAE,mBAAmB;QACjD,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,MAAM,GAAG,mBAAmB,CAAC,OAAO,EAAE,CAAC;QAE3C,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAErC,MAAM,CAAC,MAAM,CAAC;YACV,MAAM,GAAG,mBAAmB,CAAC,OAAO,EAAE,CAAC;YACvC,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,GAAG;YACjB,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC;QAEF,EAAE,CAAC,QAAQ,GAAG,UAAU,IAAI;YACxB,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,CAAC,CAAC;QAEF,EAAE,CAAC,QAAQ,GAAG;YACV,MAAM,CAAC,CAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC;QAEF,EAAE,CAAC,MAAM,GAAG,UAAU,IAAI;YACtB,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC;YACD,MAAM,CAAC,EAAE,CAAC;QACd,CAAC,CAAC;QAEF,EAAE,CAAC,QAAQ,GAAG,UAAU,IAAI;YACxB,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC1B,CAAC;YACD,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC,CAAC;QAEF;;;;WAIG;QACH,mBAAmB,KAAK;YACpB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC5B,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACP,CAAC;QAED,EAAE;QACF,yCAAyC;QACzC,EAAE;QACF,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC;IACL,CAAC;AAEL,CAAC,CAAC,EAAE,CAAC","file":"dsPrefController.js","sourcesContent":["(function () {\n    'use strict';\n\n    var pluginName = 'vdb-bench.dataservice';\n    var pluginDirName = 'vdb-bench-dataservice';\n\n    angular\n        .module(pluginName)\n        .controller('DSPrefController', DSPrefController);\n\n    DSPrefController.$inject = ['$scope', 'preferencesRegistry'];\n\n    function DSPrefController($scope, preferencesRegistry) {\n        var vm = this;\n        var panels = preferencesRegistry.getTabs();\n\n        vm.names = sortNames(_.keys(panels));\n\n        $scope.$watch(function () {\n            panels = preferencesRegistry.getTabs();\n            vm.names = sortNames(_.keys(panels));\n            Core.$apply($scope);\n        });\n\n        vm.exitPreferences = function() {\n            $scope.vmmain.selectPage($scope.vmmain.previousPageId());\n        };\n\n        vm.setPanel = function (name) {\n            vm.pref = name;\n        };\n\n        vm.hasPanel = function() {\n            return ! _.isEmpty(vm.pref);\n        };\n\n        vm.active = function (name) {\n            if (name === vm.pref) {\n                return 'active';\n            }\n            return '';\n        };\n\n        vm.getPrefs = function (pref) {\n            var panel = panels[pref];\n            if (panel) {\n                return panel.template;\n            }\n            return undefined;\n        };\n\n        /**\n         * Sort the preference by names (and ensure Reset is last).\n         * @param names  the names\n         * @returns {any} the sorted names\n         */\n        function sortNames(names) {\n            return names.sort(function (a, b) {\n                return a.localeCompare(b);\n            });\n        }\n\n        //\n        // Select the first tab in the list-style\n        //\n        if (! _.isEmpty(vm.names)) {\n            vm.setPanel(vm.names[0]);\n        }\n    }\n\n})();\n"]}